# Makefile - Unified Dropbox Clone Build System

CC = gcc
CFLAGS = -Wall -g -pthread
SRC_DIR = src
TARGET = server
CLIENT = client
FILE_CLIENT = client_file_testing

# Source files
SERVER_SRCS = $(SRC_DIR)/main.c $(SRC_DIR)/client_threadpool.c $(SRC_DIR)/commands.c \
              $(SRC_DIR)/queue.c $(SRC_DIR)/worker.c $(SRC_DIR)/metadata.c $(SRC_DIR)/file_io.c

CLIENT_SRCS = $(SRC_DIR)/client.c
FILE_CLIENT_SRCS = $(SRC_DIR)/client_file_testing.c

# Build all targets
all: $(TARGET) $(CLIENT) $(FILE_CLIENT)

# Server executable
$(TARGET): $(SERVER_SRCS)
	$(CC) $(CFLAGS) -o $(TARGET) $(SERVER_SRCS)
	@echo "Server compiled successfully"

# Simple client
$(CLIENT): $(CLIENT_SRCS)
	$(CC) $(CFLAGS) -o $(CLIENT) $(CLIENT_SRCS)
	@echo "Client compiled successfully"

# File testing client
$(FILE_CLIENT): $(FILE_CLIENT_SRCS)
	$(CC) $(CFLAGS) -o $(FILE_CLIENT) $(FILE_CLIENT_SRCS)
	@echo "File testing client compiled successfully"

# Clean build artifacts
clean:
	rm -f $(TARGET) $(CLIENT) $(FILE_CLIENT) *.o *~
	rm -rf storage/
	@echo "Clean complete"

# Run server
run: $(TARGET)
	./$(TARGET)

# Test with valgrind (memory leak detection)
valgrind: $(TARGET)
	valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./$(TARGET)

# Test with ThreadSanitizer (race condition detection)
tsan: clean
	$(CC) $(CFLAGS) -fsanitize=thread -o $(TARGET) $(SERVER_SRCS)
	./$(TARGET)

.PHONY: all clean run valgrind tsan